https://bugs.python.org/issue1674555

--- Lib/site.py
+++ Lib/site.py
@@ -527,8 +527,12 @@
     known_paths = venv(known_paths)
     if ENABLE_USER_SITE is None:
         ENABLE_USER_SITE = check_enableusersite()
-    known_paths = addusersitepackages(known_paths)
-    known_paths = addsitepackages(known_paths)
+    if os.environ.get("_PYTHONNOSITEPACKAGES") is None:
+        known_paths = addusersitepackages(known_paths)
+        known_paths = addsitepackages(known_paths)
+    else:
+        # Initialize USER_BASE and USER_SITE.
+        getusersitepackages()
     setquit()
     setcopyright()
     sethelper()
--- Lib/test/libregrtest/main.py
+++ Lib/test/libregrtest/main.py
@@ -103,7 +103,7 @@
 
     def accumulate_result(self, test, result):
         ok, test_time = result
-        if ok not in (CHILD_ERROR, INTERRUPTED):
+        if ok not in (None, CHILD_ERROR, INTERRUPTED):
             self.test_times.append((test_time, test))
         if ok == PASSED:
             self.good.append(test)
--- Lib/test/libregrtest/runtest.py
+++ Lib/test/libregrtest/runtest.py
@@ -1,6 +1,7 @@
 import faulthandler
 import importlib
 import io
+import json
 import os
 import sys
 import time
@@ -71,7 +72,7 @@
     return stdtests + sorted(tests)
 
 
-def runtest(ns, test):
+def runtest(ns, test, *, slave=False):
     """Run a single test.
 
     ns -- regrtest namespace of options
@@ -90,6 +91,25 @@
 
     output_on_failure = ns.verbose3
 
+    if not slave and test == "test_site":
+        retcode, stdout, stderr = run_test_in_subprocess(test, ns)
+        stdout, _, result = stdout.strip().rpartition("\n")
+        if retcode != 0:
+            result = (CHILD_ERROR, None)
+        else:
+            if not result:
+                return (None, None)
+            result = json.loads(result)
+        stdout = stdout.rstrip()
+        stderr = stderr.rstrip()
+        if stdout:
+            print(stdout, flush=True)
+        if stderr and not ns.pgo:
+            print(stderr, file=sys.stderr, flush=True)
+        if result[0] == INTERRUPTED:
+            raise KeyboardInterrupt
+        return result
+
     use_timeout = (ns.timeout is not None)
     if use_timeout:
         faulthandler.dump_traceback_later(ns.timeout, exit=True)
@@ -135,6 +155,41 @@
 runtest.stringio = None
 
 
+def run_test_in_subprocess(testname, ns):
+    """Run the given test in a subprocess with --slaveargs.
+
+    ns is the option Namespace parsed from command-line arguments. regrtest
+    is invoked in a subprocess with the --slaveargs argument; when the
+    subprocess exits, its return code, stdout and stderr are returned as a
+    3-tuple.
+    """
+    from subprocess import Popen, PIPE
+
+    ns_dict = vars(ns)
+    slaveargs = (ns_dict, testname)
+    slaveargs = json.dumps(slaveargs)
+
+    cmd = [sys.executable, *support.args_from_interpreter_flags(),
+           '-X', 'faulthandler',
+           '-m', 'test.regrtest',
+           '--slaveargs', slaveargs]
+    if ns.pgo:
+        cmd += ['--pgo']
+
+    # Running the child from the same working directory as regrtest's original
+    # invocation ensures that TEMPDIR for the child is the same when
+    # sysconfig.is_python_build() is true. See issue 15300.
+    popen = Popen(cmd,
+                  stdout=PIPE, stderr=PIPE,
+                  universal_newlines=True,
+                  close_fds=(os.name != 'nt'),
+                  cwd=support.SAVEDCWD)
+    with popen:
+        stdout, stderr = popen.communicate()
+        retcode = popen.wait()
+    return retcode, stdout, stderr
+
+
 def runtest_inner(ns, test, display_failure=True):
     support.unload(test)
 
--- Lib/test/libregrtest/runtest_mp.py
+++ Lib/test/libregrtest/runtest_mp.py
@@ -1,12 +1,10 @@
 import faulthandler
 import json
-import os
 import queue
 import sys
 import time
 import traceback
 import types
-from test import support
 try:
     import threading
 except ImportError:
@@ -14,7 +12,7 @@
     sys.exit(2)
 
 from test.libregrtest.runtest import (
-    runtest, INTERRUPTED, CHILD_ERROR, PROGRESS_MIN_TIME,
+    runtest, run_test_in_subprocess, INTERRUPTED, CHILD_ERROR, PROGRESS_MIN_TIME,
     format_test_result)
 from test.libregrtest.setup import setup_tests
 
@@ -26,41 +24,6 @@
 WAIT_PROGRESS = 2.0   # seconds
 
 
-def run_test_in_subprocess(testname, ns):
-    """Run the given test in a subprocess with --slaveargs.
-
-    ns is the option Namespace parsed from command-line arguments. regrtest
-    is invoked in a subprocess with the --slaveargs argument; when the
-    subprocess exits, its return code, stdout and stderr are returned as a
-    3-tuple.
-    """
-    from subprocess import Popen, PIPE
-
-    ns_dict = vars(ns)
-    slaveargs = (ns_dict, testname)
-    slaveargs = json.dumps(slaveargs)
-
-    cmd = [sys.executable, *support.args_from_interpreter_flags(),
-           '-X', 'faulthandler',
-           '-m', 'test.regrtest',
-           '--slaveargs', slaveargs]
-    if ns.pgo:
-        cmd += ['--pgo']
-
-    # Running the child from the same working directory as regrtest's original
-    # invocation ensures that TEMPDIR for the child is the same when
-    # sysconfig.is_python_build() is true. See issue 15300.
-    popen = Popen(cmd,
-                  stdout=PIPE, stderr=PIPE,
-                  universal_newlines=True,
-                  close_fds=(os.name != 'nt'),
-                  cwd=support.SAVEDCWD)
-    with popen:
-        stdout, stderr = popen.communicate()
-        retcode = popen.wait()
-    return retcode, stdout, stderr
-
-
 def run_tests_slave(slaveargs):
     ns_dict, testname = json.loads(slaveargs)
     ns = types.SimpleNamespace(**ns_dict)
@@ -68,7 +31,7 @@
     setup_tests(ns)
 
     try:
-        result = runtest(ns, testname)
+        result = runtest(ns, testname, slave=True)
     except KeyboardInterrupt:
         result = INTERRUPTED, ''
     except BaseException as e:
--- Lib/test/libregrtest/save_env.py
+++ Lib/test/libregrtest/save_env.py
@@ -272,8 +272,9 @@
         for name, get, restore in self.resource_info():
             current = get()
             original = saved_values.pop(name)
-            # Check for changes to the resource's value
-            if current != original:
+            # Check for changes to the resource's value. test_site is always run
+            # in a subprocess and is allowed to change os.environ and sys.path.
+            if current != original and self.testname != "test_site":
                 self.changed = True
                 restore(original)
                 if not self.quiet and not self.pgo:
--- Lib/test/test_site.py
+++ Lib/test/test_site.py
@@ -8,6 +8,7 @@
 import test.support
 from test.support import captured_stderr, TESTFN, EnvironmentVarGuard
 import builtins
+import importlib
 import os
 import sys
 import re
@@ -27,6 +28,10 @@
 
 import site
 
+if "_PYTHONNOSITEPACKAGES" in os.environ:
+    del os.environ["_PYTHONNOSITEPACKAGES"]
+    importlib.reload(site)
+
 if site.ENABLE_USER_SITE and not os.path.isdir(site.USER_SITE):
     # need to add user site directory for tests
     try:
@@ -443,8 +448,11 @@
     def test_startup_imports(self):
         # This tests checks which modules are loaded by Python when it
         # initially starts upon startup.
+        env = os.environ.copy()
+        env["_PYTHONNOSITEPACKAGES"] = "1"
         popen = subprocess.Popen([sys.executable, '-I', '-v', '-c',
                                   'import sys; print(set(sys.modules))'],
+                                 env=env,
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE,
                                  encoding='utf-8')
--- Makefile.pre.in
+++ Makefile.pre.in
@@ -994,7 +994,7 @@
 ######################################################################
 
 TESTOPTS=	$(EXTRATESTOPTS)
-TESTPYTHON=	$(RUNSHARED) ./$(BUILDPYTHON) $(TESTPYTHONOPTS)
+TESTPYTHON=	_PYTHONNOSITEPACKAGES=1 $(RUNSHARED) ./$(BUILDPYTHON) $(TESTPYTHONOPTS)
 TESTRUNNER=	$(TESTPYTHON) $(srcdir)/Tools/scripts/run_tests.py
 TESTTIMEOUT=	1200
 
